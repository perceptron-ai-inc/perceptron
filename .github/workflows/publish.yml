name: Publish to PyPI (on release)

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-and-publish:
    name: Build and publish
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate version consistency
        run: |
          python - << 'PY'
          import re, sys, pathlib, tomllib
          root = pathlib.Path('.')
          # Read version from pyproject
          with open(root / 'pyproject.toml','rb') as f:
            py_version = tomllib.load(f)['project']['version']
          # Read version from package __init__
          init_path = root / 'src' / 'perceptron' / '__init__.py'
          init_text = init_path.read_text(encoding='utf-8')
          m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", init_text)
          if not m:
            print('Could not find __version__ in src/perceptron/__init__.py', file=sys.stderr)
            sys.exit(1)
          init_version = m.group(1)
          if py_version != init_version:
            print(f'Version mismatch: pyproject={py_version} != __init__={init_version}', file=sys.stderr)
            sys.exit(1)
          print(f'Version OK: {py_version}')
          PY

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build sdist and wheel
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          # Skip existing to avoid failures if version already uploaded
          skip-existing: true
